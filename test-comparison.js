/**
 * SNS vs „É°„Éá„Ç£„Ç¢ ÊØîËºÉÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†
 * „É¶„Éº„Ç∂„Éº„ÅÆÊÑèË¶ãÔºà„ÅØ„Å¶„ÉñÔºâ„Å®„Éû„Çπ„Ç≥„Éü„ÅÆÂ†±ÈÅìÔºàNHK„ÄÅÊó•Áµå„Å™„Å©Ôºâ„ÅÆÈÅï„ÅÑ„ÇíÂèØË¶ñÂåñ
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import kuromoji from 'kuromoji';
import { fetchHatenaBookmarks } from './test-hatena.js';
import { fetchNewsRSS } from './test-news-rss.js';
import { analyzeSentiment } from './test-sentiment.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// kuromojiËæûÊõ∏„Éë„Çπ
const DICT_PATH = join(__dirname, 'node_modules', 'kuromoji', 'dict');

let tokenizer = null;

/**
 * kuromoji tokenizer„ÇíÂàùÊúüÂåñ
 */
async function initTokenizer() {
  if (tokenizer) return tokenizer;

  return new Promise((resolve, reject) => {
    kuromoji.builder({ dicPath: DICT_PATH }).build((err, result) => {
      if (err) reject(err);
      else {
        tokenizer = result;
        resolve(tokenizer);
      }
    });
  });
}

/**
 * „ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÂêçË©û„ÇíÊäΩÂá∫
 */
function extractNouns(text) {
  if (!tokenizer) {
    throw new Error('Tokenizer not initialized');
  }

  const tokens = tokenizer.tokenize(text);
  return tokens
    .filter(token =>
      token.pos === 'ÂêçË©û' &&
      ['‰∏ÄËà¨', 'Âõ∫ÊúâÂêçË©û', '„ÇµÂ§âÊé•Á∂ö'].includes(token.pos_detail_1) &&
      token.surface_form.length > 1
    )
    .map(token => token.surface_form);
}

/**
 * ÂçòË™û„ÅÆÂá∫ÁèæÈ†ªÂ∫¶„Çí„Ç´„Ç¶„É≥„Éà
 */
function countWords(words) {
  const frequency = {};
  words.forEach(word => {
    frequency[word] = (frequency[word] || 0) + 1;
  });
  return frequency;
}

/**
 * SNS„Éá„Éº„Çø„Å®„É°„Éá„Ç£„Ç¢„Éá„Éº„Çø„ÇíÂèñÂæó
 */
async function fetchComparisonData(limit = 20) {
  console.log('\nüìä SNS vs „É°„Éá„Ç£„Ç¢ „Éá„Éº„ÇøÂèéÈõÜ‰∏≠...\n');

  // SNSÁ≥ª: „ÅØ„Å¶„Å™„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ
  console.log('üì± SNSÁ≥ª„Éá„Éº„ÇøÂèñÂæó‰∏≠...');
  const snsData = await fetchHatenaBookmarks('general', limit);

  // „É°„Éá„Ç£„Ç¢Á≥ª: NHK + Yahoo!„Éã„É•„Éº„Çπ
  console.log('\nüì∞ „É°„Éá„Ç£„Ç¢Á≥ª„Éá„Éº„ÇøÂèñÂæó‰∏≠...');
  const nhkData = await fetchNewsRSS('nhk', Math.floor(limit / 2));
  await new Promise(resolve => setTimeout(resolve, 1000));
  const yahooData = await fetchNewsRSS('yahoo_topics', Math.floor(limit / 2));

  const mediaData = [...nhkData, ...yahooData];

  console.log(`\n‚úÖ „Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫Ü`);
  console.log(`   SNS: ${snsData.length}‰ª∂`);
  console.log(`   „É°„Éá„Ç£„Ç¢: ${mediaData.length}‰ª∂\n`);

  return { snsData, mediaData };
}

/**
 * „Ç≠„Éº„ÉØ„Éº„ÉâÊäΩÂá∫„Å®ÂàÜÊûê
 */
async function analyzeKeywords(data) {
  await initTokenizer();

  const allText = data.map(item => item.title + ' ' + item.content).join(' ');
  const nouns = extractNouns(allText);
  const frequency = countWords(nouns);

  // È†ªÂ∫¶È†Ü„Å´„ÇΩ„Éº„Éà
  const sorted = Object.entries(frequency)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 30);

  return sorted;
}

/**
 * ÊÑüÊÉÖÂàÜÊûêÔºàÂÖ®Ë®ò‰∫ã„ÅÆÂπ≥ÂùáÔºâ
 */
async function analyzeSentimentAverage(data) {
  await initTokenizer();

  let totalScore = 0;
  let positiveCount = 0;
  let negativeCount = 0;
  let neutralCount = 0;

  for (const item of data) {
    const text = item.title + ' ' + item.content;
    const result = await analyzeSentiment(text);

    totalScore += result.score;

    if (result.sentiment === 'positive') positiveCount++;
    else if (result.sentiment === 'negative') negativeCount++;
    else neutralCount++;
  }

  const total = data.length;
  return {
    averageScore: totalScore / total,
    positive: { count: positiveCount, rate: (positiveCount / total) * 100 },
    negative: { count: negativeCount, rate: (negativeCount / total) * 100 },
    neutral: { count: neutralCount, rate: (neutralCount / total) * 100 }
  };
}

/**
 * ÊØîËºÉ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
 */
async function generateComparisonReport() {
  console.log('='.repeat(70));
  console.log('üìä SNS vs „É°„Éá„Ç£„Ç¢ ÊØîËºÉÂàÜÊûê„É¨„Éù„Éº„Éà');
  console.log('='.repeat(70));

  // „Éá„Éº„ÇøÂèñÂæó
  const { snsData, mediaData } = await fetchComparisonData(20);

  // „Ç≠„Éº„ÉØ„Éº„ÉâÂàÜÊûê
  console.log('\nüîë „Ç≠„Éº„ÉØ„Éº„ÉâÂàÜÊûê‰∏≠...');
  const snsKeywords = await analyzeKeywords(snsData);
  const mediaKeywords = await analyzeKeywords(mediaData);

  // ÊÑüÊÉÖÂàÜÊûê
  console.log('üòä ÊÑüÊÉÖÂàÜÊûê‰∏≠...\n');
  const snsSentiment = await analyzeSentimentAverage(snsData);
  const mediaSentiment = await analyzeSentimentAverage(mediaData);

  // „É¨„Éù„Éº„ÉàË°®Á§∫
  console.log('='.repeat(70));
  console.log('üìà 1. ÊÑüÊÉÖ„Éà„É¨„É≥„ÉâÊØîËºÉ');
  console.log('='.repeat(70));

  console.log('\n„ÄêSNSÔºà„É¶„Éº„Ç∂„Éº„ÅÆÊÑèË¶ãÔºâ„Äë');
  console.log(`  Âπ≥ÂùáÊÑüÊÉÖ„Çπ„Ç≥„Ç¢: ${snsSentiment.averageScore.toFixed(2)}`);
  console.log(`  üòä „Éù„Ç∏„ÉÜ„Ç£„Éñ: ${snsSentiment.positive.count}‰ª∂ (${snsSentiment.positive.rate.toFixed(1)}%)`);
  console.log(`  üòî „Éç„Ç¨„ÉÜ„Ç£„Éñ: ${snsSentiment.negative.count}‰ª∂ (${snsSentiment.negative.rate.toFixed(1)}%)`);
  console.log(`  üòê ‰∏≠Á´ã:       ${snsSentiment.neutral.count}‰ª∂ (${snsSentiment.neutral.rate.toFixed(1)}%)`);

  console.log('\n„Äê„É°„Éá„Ç£„Ç¢ÔºàÂ†±ÈÅìÊ©üÈñ¢„ÅÆÊÑèË¶ãÔºâ„Äë');
  console.log(`  Âπ≥ÂùáÊÑüÊÉÖ„Çπ„Ç≥„Ç¢: ${mediaSentiment.averageScore.toFixed(2)}`);
  console.log(`  üòä „Éù„Ç∏„ÉÜ„Ç£„Éñ: ${mediaSentiment.positive.count}‰ª∂ (${mediaSentiment.positive.rate.toFixed(1)}%)`);
  console.log(`  üòî „Éç„Ç¨„ÉÜ„Ç£„Éñ: ${mediaSentiment.negative.count}‰ª∂ (${mediaSentiment.negative.rate.toFixed(1)}%)`);
  console.log(`  üòê ‰∏≠Á´ã:       ${mediaSentiment.neutral.count}‰ª∂ (${mediaSentiment.neutral.rate.toFixed(1)}%)`);

  // ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢Â∑Æ
  const sentimentDiff = snsSentiment.averageScore - mediaSentiment.averageScore;
  console.log('\n„ÄêÂ∑ÆÂàÜÂàÜÊûê„Äë');
  console.log(`  ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢Â∑Æ: ${sentimentDiff > 0 ? '+' : ''}${sentimentDiff.toFixed(2)}`);
  if (Math.abs(sentimentDiff) > 0.5) {
    if (sentimentDiff > 0) {
      console.log('  ‚Üí SNS„ÅÆÊñπ„Åå„Éù„Ç∏„ÉÜ„Ç£„Éñ„Å™ÂÇæÂêë');
    } else {
      console.log('  ‚Üí „É°„Éá„Ç£„Ç¢„ÅÆÊñπ„Åå„Éù„Ç∏„ÉÜ„Ç£„Éñ„Å™ÂÇæÂêë');
    }
  } else {
    console.log('  ‚Üí ÊÑüÊÉÖÂÇæÂêë„ÅØ„Åª„ÅºÂêåÁ≠â');
  }

  // „Ç≠„Éº„ÉØ„Éº„ÉâÊØîËºÉ
  console.log('\n' + '='.repeat(70));
  console.log('üîë 2. Ê≥®ÁõÆ„Ç≠„Éº„ÉØ„Éº„ÉâÊØîËºÉ (TOP 15)');
  console.log('='.repeat(70));

  console.log('\n„ÄêSNSÔºà„É¶„Éº„Ç∂„Éº„ÅåÊ≥®ÁõÆÔºâ„Äë');
  snsKeywords.slice(0, 15).forEach(([word, count], index) => {
    const bar = '‚ñà'.repeat(Math.min(count, 20));
    console.log(`  ${(index + 1).toString().padStart(2)}. ${word.padEnd(12)} ${count.toString().padStart(3)}Âõû ${bar}`);
  });

  console.log('\n„Äê„É°„Éá„Ç£„Ç¢ÔºàÂ†±ÈÅì„ÅåÊ≥®ÁõÆÔºâ„Äë');
  mediaKeywords.slice(0, 15).forEach(([word, count], index) => {
    const bar = '‚ñà'.repeat(Math.min(count, 20));
    console.log(`  ${(index + 1).toString().padStart(2)}. ${word.padEnd(12)} ${count.toString().padStart(3)}Âõû ${bar}`);
  });

  // Áã¨Ëá™„Ç≠„Éº„ÉØ„Éº„ÉâÂàÜÊûê
  console.log('\n' + '='.repeat(70));
  console.log('üéØ 3. Áã¨Ëá™„Ç≠„Éº„ÉØ„Éº„ÉâÂàÜÊûê');
  console.log('='.repeat(70));

  const snsOnlyKeywords = findUniqueKeywords(snsKeywords, mediaKeywords, 10);
  const mediaOnlyKeywords = findUniqueKeywords(mediaKeywords, snsKeywords, 10);

  console.log('\n„ÄêSNS„ÅßÁâπ„Å´Ê≥®ÁõÆ„Åï„Çå„Å¶„ÅÑ„Çã„Ç≠„Éº„ÉØ„Éº„Éâ„Äë');
  snsOnlyKeywords.forEach(([word, count], index) => {
    console.log(`  ${index + 1}. ${word} (${count}Âõû)`);
  });

  console.log('\n„Äê„É°„Éá„Ç£„Ç¢„ÅßÁâπ„Å´Â†±ÈÅì„Åï„Çå„Å¶„ÅÑ„Çã„Ç≠„Éº„ÉØ„Éº„Éâ„Äë');
  mediaOnlyKeywords.forEach(([word, count], index) => {
    console.log(`  ${index + 1}. ${word} (${count}Âõû)`);
  });

  console.log('\n' + '='.repeat(70));
  console.log('‚úÖ ÊØîËºÉÂàÜÊûêÂÆå‰∫Ü');
  console.log('='.repeat(70));

  return {
    snsData,
    mediaData,
    snsSentiment,
    mediaSentiment,
    snsKeywords,
    mediaKeywords
  };
}

/**
 * ‰∏ÄÊñπ„Å´„Åó„ÅãÂ≠òÂú®„Åó„Å™„ÅÑ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊäΩÂá∫
 */
function findUniqueKeywords(targetKeywords, compareKeywords, limit = 10) {
  const compareWords = new Set(compareKeywords.map(([word]) => word));

  return targetKeywords
    .filter(([word]) => !compareWords.has(word))
    .slice(0, limit);
}

// „É°„Ç§„É≥ÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
  try {
    await generateComparisonReport();
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  }
}

export { generateComparisonReport, fetchComparisonData, analyzeKeywords };
